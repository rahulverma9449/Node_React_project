{"ast":null,"code":"import _slicedToArray from \"/Users/ruchikaashokbharati/Documents/PortfolioMaster/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\"],\n  _excluded2 = [\"colorSchemes\"],\n  _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetCssVar from './createGetCssVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n  var _options$theme = options.theme,\n    baseTheme = _options$theme === void 0 ? {} : _options$theme,\n    _options$defaultMode = options.defaultMode,\n    desisgnSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n    designSystemColorScheme = options.defaultColorScheme,\n    _options$disableTrans = options.disableTransitionOnChange,\n    disableTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n    _options$enableColorS = options.enableColorScheme,\n    enableColorScheme = _options$enableColorS === void 0 ? true : _options$enableColorS,\n    _options$prefix = options.prefix,\n    designSystemPrefix = _options$prefix === void 0 ? '' : _options$prefix,\n    shouldSkipGeneratingVar = options.shouldSkipGeneratingVar;\n  var systemSpacing = createSpacing(baseTheme.spacing);\n  var systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(_ref) {\n    var children = _ref.children,\n      _ref$theme = _ref.theme,\n      themeProp = _ref$theme === void 0 ? {} : _ref$theme,\n      _ref$prefix = _ref.prefix,\n      prefix = _ref$prefix === void 0 ? designSystemPrefix : _ref$prefix,\n      _ref$modeStorageKey = _ref.modeStorageKey,\n      modeStorageKey = _ref$modeStorageKey === void 0 ? DEFAULT_MODE_STORAGE_KEY : _ref$modeStorageKey,\n      _ref$attribute = _ref.attribute,\n      attribute = _ref$attribute === void 0 ? DEFAULT_ATTRIBUTE : _ref$attribute,\n      _ref$defaultMode = _ref.defaultMode,\n      defaultMode = _ref$defaultMode === void 0 ? desisgnSystemMode : _ref$defaultMode,\n      _ref$defaultColorSche = _ref.defaultColorScheme,\n      defaultColorScheme = _ref$defaultColorSche === void 0 ? designSystemColorScheme : _ref$defaultColorSche;\n    // make sure that baseTheme is always independent of each <CssVarsProvider /> call.\n    // JSON.parse(JSON.stringify(...)) is okay to be used as long as the baseTheme is a plain object.\n    var clonedBaseTheme = React.useMemo(function () {\n      return JSON.parse(JSON.stringify(baseTheme));\n    }, []);\n    var _clonedBaseTheme$colo = clonedBaseTheme.colorSchemes,\n      baseColorSchemes = _clonedBaseTheme$colo === void 0 ? {} : _clonedBaseTheme$colo,\n      restBaseTheme = _objectWithoutPropertiesLoose(clonedBaseTheme, _excluded);\n    var _themeProp$colorSchem = themeProp.colorSchemes,\n      colorSchemesProp = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n    var hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    var _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n      _deepmerge$components = _deepmerge.components,\n      components = _deepmerge$components === void 0 ? {} : _deepmerge$components,\n      mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n    var colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    var allColorSchemes = Object.keys(colorSchemes);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    var _useCurrentColorSchem = useCurrentColorScheme({\n        supportedColorSchemes: allColorSchemes,\n        defaultLightColorScheme: defaultLightColorScheme,\n        defaultDarkColorScheme: defaultDarkColorScheme,\n        modeStorageKey: modeStorageKey,\n        defaultMode: defaultMode\n      }),\n      mode = _useCurrentColorSchem.mode,\n      setMode = _useCurrentColorSchem.setMode,\n      systemMode = _useCurrentColorSchem.systemMode,\n      lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n      darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n      colorScheme = _useCurrentColorSchem.colorScheme,\n      setColorScheme = _useCurrentColorSchem.setColorScheme;\n    var resolvedColorScheme = function () {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    }();\n    var _cssVarsParser = cssVarsParser(mergedTheme, {\n        prefix: prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar: shouldSkipGeneratingVar\n      }),\n      rootCss = _cssVarsParser.css,\n      rootVars = _cssVarsParser.vars;\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      components: components,\n      colorSchemes: colorSchemes,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\n      getCssVar: createGetCssVar(prefix)\n    });\n    var styleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        scheme = _ref3[1];\n      var _cssVarsParser2 = cssVarsParser(scheme, {\n          prefix: prefix,\n          basePrefix: designSystemPrefix,\n          shouldSkipGeneratingVar: shouldSkipGeneratingVar\n        }),\n        css = _cssVarsParser2.css,\n        vars = _cssVarsParser2.vars;\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n      var resolvedDefaultColorScheme = function () {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      }();\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n    React.useEffect(function () {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(function () {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n      var priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n      return function () {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode]);\n    React.useEffect(function () {\n      var timer;\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        var css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (function () {\n          return window.getComputedStyle(document.body);\n        })();\n        timer = setTimeout(function () {\n          document.head.removeChild(css);\n        }, 1);\n      }\n      return function () {\n        clearTimeout(timer);\n      };\n    }, [colorScheme]);\n    React.useEffect(function () {\n      hasMounted.current = true;\n      return function () {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode: mode,\n        setMode: setMode,\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme,\n        colorScheme: colorScheme,\n        setColorScheme: setColorScheme,\n        allColorSchemes: allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: mergedTheme,\n        children: children\n      })]\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","_excluded2","_excluded3","React","PropTypes","GlobalStyles","deepmerge","unstable_useEnhancedEffect","useEnhancedEffect","createSpacing","createBreakpoints","cssVarsParser","ThemeProvider","getInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","createGetCssVar","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","_baseTheme$breakpoint","theme","baseTheme","defaultMode","desisgnSystemMode","designSystemColorScheme","defaultColorScheme","disableTransitionOnChange","enableColorScheme","prefix","designSystemPrefix","shouldSkipGeneratingVar","systemSpacing","spacing","systemBreakpoints","breakpoints","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","modeStorageKey","attribute","clonedBaseTheme","useMemo","JSON","parse","stringify","baseColorSchemes","restBaseTheme","colorSchemesProp","restThemeProp","hasMounted","useRef","_deepmerge","components","mergedTheme","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","resolvedColorScheme","basePrefix","rootCss","css","rootVars","vars","getCssVar","styleSheet","entries","forEach","key","scheme","resolvedDefaultColorScheme","useEffect","document","documentElement","setAttribute","priorColorScheme","style","getPropertyValue","setProperty","timer","current","createElement","appendChild","createTextNode","head","window","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","oneOfType","object"],"sources":["/Users/ruchikaashokbharati/Documents/PortfolioMaster/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"],\n      _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetCssVar from './createGetCssVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n\n  const {\n    theme: baseTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange = false,\n    enableColorScheme = true,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar\n  } = options;\n  const systemSpacing = createSpacing(baseTheme.spacing);\n  const systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = {},\n    prefix = designSystemPrefix,\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    attribute = DEFAULT_ATTRIBUTE,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme\n  }) {\n    // make sure that baseTheme is always independent of each <CssVarsProvider /> call.\n    // JSON.parse(JSON.stringify(...)) is okay to be used as long as the baseTheme is a plain object.\n    const clonedBaseTheme = React.useMemo(() => JSON.parse(JSON.stringify(baseTheme)), []);\n\n    const {\n      colorSchemes: baseColorSchemes = {}\n    } = clonedBaseTheme,\n          restBaseTheme = _objectWithoutPropertiesLoose(clonedBaseTheme, _excluded);\n\n    const {\n      colorSchemes: colorSchemesProp = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    const hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        {\n      components = {}\n    } = _deepmerge,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      components,\n      colorSchemes,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\n      getCssVar: createGetCssVar(prefix)\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(document.body))();\n\n        timer = setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}